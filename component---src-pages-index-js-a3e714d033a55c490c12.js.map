{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["BlogIndex","render","_this$props","this","props","data","language","pageContext","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_layouts_Layout__WEBPACK_IMPORTED_MODULE_5__","location","_components_seo__WEBPACK_IMPORTED_MODULE_6__","keywords","_components_Bio__WEBPACK_IMPORTED_MODULE_4__","map","_ref","node","frontmatter","fields","slug","availableLanguages","_ref2","index","key","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","length","readIn","Fragment","react_intl__WEBPACK_IMPORTED_MODULE_3__","id","defaultMessage","style","marginBottom","rhythm","boxShadow","date","_components_ReadTime__WEBPACK_IMPORTED_MODULE_8__","minutes","timeToRead","dangerouslySetInnerHTML","__html","excerpt","React","Component","pageQuery"],"mappings":"4OAUMA,4FACJC,OAAA,WAAS,IAAAC,EAIHC,KAAKC,MAFPC,EAFKH,EAELG,KACeC,EAHVJ,EAGLK,YAAeD,SAEXE,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKQ,kBAAkBC,MAErC,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,SAAUhB,KAAKC,MAAMe,SACrBR,MAAOH,EACPF,SAAUA,GAEVS,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACET,MAAM,YACNU,SAAU,yCAEZN,EAAAC,EAAAC,cAACK,EAAA,EAAD,MACCV,EAAMW,IAAI,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACNd,EAAQc,EAAKC,YAAYf,OAASc,EAAKE,OAAOC,KAE9CC,EAAqBJ,EAAKE,OAAOE,mBAAmBN,IACxD,SAAAO,EAAqBC,GAArB,IAAGH,EAAHE,EAAGF,KAAMtB,EAATwB,EAASxB,SAAT,OACES,EAAAC,EAAAC,cAAA,QAAMe,IAAKJ,GACTb,EAAAC,EAAAC,cAACgB,EAAA,KAAD,CAAMC,GAAIN,GAAOtB,GAChBmB,EAAKE,OAAOE,mBAAmBM,OAAS,IAAMJ,GAAS,QAKxDK,EAASP,EAAmBM,OAChCpB,EAAAC,EAAAC,cAACF,EAAAC,EAAMqB,SAAP,UACItB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAkBC,GAAG,UAAUC,eAAgB,YAAc,IAC9DX,GAED,KAEJ,OACEd,EAAAC,EAAAC,cAAA,OAAKe,IAAKP,EAAKc,IACbxB,EAAAC,EAAAC,cAAA,MACEwB,MAAO,CACLC,aAAcC,YAAO,OAGvB5B,EAAAC,EAAAC,cAACgB,EAAA,KAAD,CAAMQ,MAAO,CAAEG,UAAS,QAAYV,GAAIT,EAAKE,OAAOC,MACjDjB,IAGLI,EAAAC,EAAAC,cAAA,aACGQ,EAAKC,YAAYmB,KADpB,MAC4B9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAUC,QAAStB,EAAKuB,aAAe,IAChEZ,GAEHrB,EAAAC,EAAAC,cAAA,KAAGgC,wBAAyB,CAAEC,OAAQzB,EAAK0B,mBAtDjCC,IAAMC,WA+DfrD,YAER,IAAMsD,EAAS","file":"component---src-pages-index-js-a3e714d033a55c490c12.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport { FormattedMessage } from 'react-intl'\n\nimport Bio from '../components/Bio'\nimport Layout from '../layouts/Layout'\nimport SEO from '../components/seo'\nimport { rhythm } from '../utils/typography'\nimport { ReadTime } from '../components/ReadTime'\n\nclass BlogIndex extends React.Component {\n  render() {\n    const {\n      data,\n      pageContext: { language },\n    } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout\n        location={this.props.location}\n        title={siteTitle}\n        language={language}\n      >\n        <SEO\n          title=\"All posts\"\n          keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n        />\n        <Bio />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n\n          const availableLanguages = node.fields.availableLanguages.map(\n            ({ slug, language }, index) => (\n              <span key={slug}>\n                <Link to={slug}>{language}</Link>\n                {node.fields.availableLanguages.length - 1 !== index && ', '}\n              </span>\n            )\n          )\n\n          const readIn = availableLanguages.length ? (\n            <React.Fragment>\n              • <FormattedMessage id=\"read.in\" defaultMessage={'Read in'} />{' '}\n              {availableLanguages}\n            </React.Fragment>\n          ) : null\n\n          return (\n            <div key={node.id}>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>\n                {node.frontmatter.date} • <ReadTime minutes={node.timeToRead} />{' '}\n                {readIn}\n              </small>\n              <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n            </div>\n          )\n        })}\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query($language: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { frontmatter: { language: { eq: $language } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          id\n          excerpt\n          fields {\n            slug\n            availableLanguages {\n              slug\n              language\n            }\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}